import streamlit as st
import pandas as pd
import numpy as np
import plotly.express as px
import seaborn as sns
import matplotlib.pyplot as plt
from datetime import datetime
from transformers import pipeline
import psycopg2
from psycopg2 import OperationalError
from psycopg2.extras import RealDictCursor
import os

# Initialize session state
def init_session_state():
    if "current_page" not in st.session_state:
        st.session_state.current_page = "Login"
    if "logged_in" not in st.session_state:
        st.session_state.logged_in = False
    if "email" not in st.session_state:
        st.session_state.email = None
    if "user_info" not in st.session_state:
        st.session_state.user_info = {"fname": "", "lname": ""}

# Page configuration
def setup_page_config():
    st.set_page_config(
        page_title="JitJai - ‡∏à‡∏¥‡∏ï‡πÉ‡∏à‡∏î‡∏µ‡∏ó‡∏∏‡∏Å‡∏ß‡∏±‡∏ô",
        page_icon="üìù",
        layout="wide",
        initial_sidebar_state="expanded"
    )

# Custom CSS styling
def setup_custom_css():
    st.markdown("""
    <style>
    [data-testid="stAppViewContainer"] {
        background: linear-gradient(135deg, #92bae5, #5f9ca2);
        color: white;
    }
    
    @media screen and (max-width: 600px) {
        .stTextInput input, .stTextArea textarea {
            font-size: 14px !important;
        }
        button {
            padding: 8px 16px !important;
            font-size: 14px !important;
        }
    }
    
    div[data-baseweb="textarea"] {
        background-color: #1E90FF !important;
        border-radius: 10px;
        padding: 8px;
    }
    
    div[data-baseweb="input"] {
        background-color: #1E90FF !important;
        border-radius: 10px;
        padding: 6px;
    }
    
    html, body, [data-testid="stAppViewContainer"] {
        color: white !important;
    }
    
    .dataframe, .dataframe th, .dataframe td {
        color: black !important;
    }
    </style>
    """, unsafe_allow_html=True)

# Load sentiment analysis model
@st.cache_resource
def load_sentiment_model():
    try:
        return pipeline(
            "sentiment-analysis",
            model="poom-sci/WangchanBERTa-finetuned-sentiment",
            tokenizer="poom-sci/WangchanBERTa-finetuned-sentiment",
            device="cpu"
        )
    except Exception as e:
        st.error(f"Failed to load model: {e}")
        return None

# Database connection class
class DatabaseManager:
    def __init__(self):
        self.connection = None
        self.connect()
    
    def connect(self):
        try:
            self.connection = psycopg2.connect(
                host=st.secrets["DB_HOST"],
                database=st.secrets["DB_NAME"],
                user=st.secrets["DB_USER"],
                password=st.secrets["DB_PASS"],
                port=st.secrets["DB_PORT"],
                sslmode="require"
            )
        except OperationalError as e:
            st.error(f"Database connection failed: {e}")
    
    def execute_query(self, query, params=None, fetch_one=False):
        try:
            cursor = self.connection.cursor()
            cursor.execute(query, params or ())
            
            if query.strip().upper().startswith("SELECT"):
                return cursor.fetchone() if fetch_one else cursor.fetchall()
            
            self.connection.commit()
            return True
            
        except Exception as e:
            st.error(f"SQL query failed: {e}")
            return False
        finally:
            if 'cursor' in locals():
                cursor.close()

# Page classes
class LoginPage:
    def display(self):
        st.title("üîê ‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö")
        
        col1, col2, col3 = st.columns([1,2,1])
        with col2:
            st.image("data/logo.png", width=200)
        
        email = st.text_input("‡∏≠‡∏µ‡πÄ‡∏°‡∏•")
        password = st.text_input("‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô", type="password")
        
        col1, col2 = st.columns(2)
        with col1:
            if st.button("‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö", use_container_width=True):
                self.handle_login(email, password)
        with col2:
            if st.button("‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å", use_container_width=True):
                st.session_state.current_page = "Register"
                st.rerun()
    
    def handle_login(self, email, password):
        if not email or not password:
            st.warning("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡πÅ‡∏•‡∏∞‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô")
            return
            
        db = DatabaseManager()
        user = db.execute_query(
            "SELECT email, fname, lname FROM users WHERE email = %s AND password = %s",
            (email, password),
            fetch_one=True
        )
        
        if user:
            st.session_state.logged_in = True
            st.session_state.email = user[0]
            st.session_state.user_info = {"fname": user[1], "lname": user[2]}
            st.session_state.current_page = "Dashboard"
            st.toast("‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!", icon="‚úÖ")
            st.rerun()
        else:
            st.error("‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏´‡∏£‡∏∑‡∏≠‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á")

class RegisterPage:
    def display(self):
        st.title("üìù ‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å")
        
        with st.form("register_form"):
            name = st.text_input("‡∏ä‡∏∑‡πà‡∏≠")
            lastname = st.text_input("‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏•")
            email = st.text_input("‡∏≠‡∏µ‡πÄ‡∏°‡∏•")
            password = st.text_input("‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô", type="password")
            confirm_password = st.text_input("‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô", type="password")
            
            if st.form_submit_button("‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å"):
                self.handle_registration(name, lastname, email, password, confirm_password)
        
        if st.button("‡∏°‡∏µ‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß? ‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö"):
            st.session_state.current_page = "Login"
            st.rerun()
    
    def handle_registration(self, name, lastname, email, password, confirm_password):
        if not all([name, lastname, email, password, confirm_password]):
            st.warning("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö‡∏ó‡∏∏‡∏Å‡∏ä‡πà‡∏≠‡∏á")
            return
            
        if password != confirm_password:
            st.warning("‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÑ‡∏°‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ô")
            return
            
        db = DatabaseManager()
        existing_user = db.execute_query(
            "SELECT email FROM users WHERE email = %s",
            (email,),
            fetch_one=True
        )
        
        if existing_user:
            st.error("‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏ô‡∏µ‡πâ‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÅ‡∏•‡πâ‡∏ß")
            return
            
        success = db.execute_query(
            "INSERT INTO users (email, password, fname, lname) VALUES (%s, %s, %s, %s)",
            (email, password, name, lastname)
        )
        
        if success:
            st.success("‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à! ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö")
            st.session_state.current_page = "Login"
            st.rerun()

class DashboardPage:
    def display(self):
        user_info = st.session_state.user_info
        st.header(f"‡∏¢‡∏¥‡∏ô‡∏î‡∏µ‡∏ï‡πâ‡∏≠‡∏ô‡∏£‡∏±‡∏ö, {user_info['fname']} {user_info['lname']}")
        st.title("üìä ‡πÅ‡∏î‡∏ä‡∏ö‡∏≠‡∏£‡πå‡∏î‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û‡∏à‡∏¥‡∏ï")
        
        self.check_daily_entry()
        self.show_date_range_selector()
        self.display_analytics()
    
    def check_daily_entry(self):
        db = DatabaseManager()
        today = datetime.now().strftime('%Y-%m-%d')
        has_entry = db.execute_query(
            "SELECT 1 FROM diary WHERE email = %s AND DATE(date) = %s",
            (st.session_state.email, today),
            fetch_one=True
        )
        
        if not has_entry:
            st.toast("‡∏Ñ‡∏∏‡∏ì‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏≠‡∏≤‡∏£‡∏°‡∏ì‡πå‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ", icon="üìù")
    
    def show_date_range_selector(self):
        col1, col2 = st.columns(2)
        with col1:
            self.start_date = st.date_input("‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô", value=datetime.now())
        with col2:
            self.end_date = st.date_input("‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î", value=datetime.now())
    
    def display_analytics(self):
        db = DatabaseManager()
        data = db.execute_query("""
            SELECT date, sentiment, COUNT(*) AS count
            FROM diary
            WHERE email = %s AND date BETWEEN %s AND %s
            GROUP BY date, sentiment
            ORDER BY date
        """, (st.session_state.email, self.start_date, self.end_date))
        
        if not data:
            st.warning("‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å")
            return
            
        df = pd.DataFrame(data, columns=["date", "sentiment", "count"])
        self.display_sentiment_summary(df)
        self.display_trend_chart(df)
        self.display_pie_chart(df)
    
    def display_sentiment_summary(self, df):
        sentiment_counts = df['sentiment'].value_counts().to_dict()
        pos = sentiment_counts.get('pos', 0)
        neu = sentiment_counts.get('neu', 0)
        neg = sentiment_counts.get('neg', 0)
        
        if pos > neg and pos > neu:
            st.success("""
            **‡∏î‡∏π‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡∏ß‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏ú‡πà‡∏≤‡∏ô‡∏°‡∏≤‡∏Ñ‡∏∏‡∏ì‡∏û‡∏ö‡πÅ‡∏ï‡πà‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏£‡∏≤‡∏ß‡∏î‡∏µ‡πÜ‡∏ô‡∏∞!**  
            ‡πÄ‡∏£‡∏≤‡∏î‡∏µ‡πÉ‡∏à‡∏ó‡∏µ‡πà‡πÇ‡∏•‡∏Å‡πÉ‡∏ö‡∏ô‡∏µ‡πâ‡πÉ‡∏à‡∏î‡∏µ‡∏Å‡∏±‡∏ö‡∏Ñ‡∏∏‡∏ì
            """)
        else:
            st.info("""
            **‡∏´‡∏≤‡∏Å‡∏Ñ‡∏∏‡∏ì‡∏û‡∏ö‡πÅ‡∏ï‡πà‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏£‡∏≤‡∏ß‡πÅ‡∏¢‡πà‡πÜ ‡πÄ‡∏£‡∏≤‡∏≠‡∏¢‡∏π‡πà‡∏ï‡∏£‡∏á‡∏ô‡∏µ‡πâ‡∏ô‡∏∞**  
            ‡πÑ‡∏°‡πà‡πÄ‡∏õ‡πá‡∏ô‡πÑ‡∏£‡πÄ‡∏•‡∏¢ ‡∏°‡∏±‡∏ô‡πÄ‡∏õ‡πá‡∏ô‡∏õ‡∏Å‡∏ï‡∏¥‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏£‡∏π‡πâ‡∏™‡∏∂‡∏Å‡πÅ‡∏¢‡πà...
            """)
    
    def display_trend_chart(self, df):
        st.subheader("üìà ‡πÅ‡∏ô‡∏ß‡πÇ‡∏ô‡πâ‡∏°‡∏≠‡∏≤‡∏£‡∏°‡∏ì‡πå‡∏£‡∏≤‡∏¢‡∏ß‡∏±‡∏ô")
        
        df['date'] = pd.to_datetime(df['date'])
        sentiment_map = {"pos": 1, "neu": 0, "neg": -1}
        df['sentiment_numeric'] = df['sentiment'].map(sentiment_map)
        
        try:
            fig = px.line(
                df, x='date', y='sentiment_numeric',
                title='‡πÅ‡∏ô‡∏ß‡πÇ‡∏ô‡πâ‡∏°‡∏≠‡∏≤‡∏£‡∏°‡∏ì‡πå‡∏£‡∏≤‡∏¢‡∏ß‡∏±‡∏ô',
                labels={'sentiment_numeric': '‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏≠‡∏≤‡∏£‡∏°‡∏ì‡πå', 'date': '‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà'}
            )
            fig.update_yaxes(range=[-1.1, 1.1], tickvals=[-1, 0, 1], ticktext=["Negative", "Neutral", "Positive"])
            st.plotly_chart(fig, use_container_width=True)
        except:
            st.warning("‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÅ‡∏™‡∏î‡∏á‡∏Å‡∏£‡∏≤‡∏ü‡πÅ‡∏ô‡∏ß‡πÇ‡∏ô‡πâ‡∏°‡πÑ‡∏î‡πâ")
    
    def display_pie_chart(self, df):
        st.subheader("üìä ‡∏™‡∏±‡∏î‡∏™‡πà‡∏ß‡∏ô‡∏≠‡∏≤‡∏£‡∏°‡∏ì‡πå")
        
        sentiment_order = ['pos', 'neu', 'neg']
        df_sen = df['sentiment'].value_counts().reindex(sentiment_order, fill_value=0)
        df_sen = df_sen.reset_index()
        df_sen.columns = ['sentiment', 'count']
        df_sen['percent'] = (df_sen['count'] / df_sen['count'].sum()) * 100
        
        try:
            fig = px.pie(
                df_sen, values='percent', names='sentiment',
                color='sentiment',
                color_discrete_map={'pos':'#f8b9d4', 'neu':'#f0d29d', 'neg':'#5f9ca2'}
            )
            st.plotly_chart(fig, use_container_width=True)
        except:
            st.warning("‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÅ‡∏™‡∏î‡∏á‡∏Å‡∏£‡∏≤‡∏ü‡∏ß‡∏á‡∏Å‡∏•‡∏°‡πÑ‡∏î‡πâ")

class DiaryPage:
    def display(self):
        st.title("üìù ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏≠‡∏≤‡∏£‡∏°‡∏ì‡πå‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ")
        
        self.note = st.text_area("‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏π‡πâ‡∏™‡∏∂‡∏Å‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πà...", height=150)
        
        if st.button("‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å", use_container_width=True):
            self.save_entry()
    
    def save_entry(self):
        if not self.note:
            st.warning("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡πà‡∏≠‡∏ô‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å")
            return
            
        sentiment_analyzer = load_sentiment_model()
        if not sentiment_analyzer:
            st.error("‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏π‡πâ‡∏™‡∏∂‡∏Å‡πÑ‡∏î‡πâ")
            return
            
        try:
            res = sentiment_analyzer(self.note)
            mood_label = res[0]['label'].lower()
            
            db = DatabaseManager()
            success = db.execute_query(
                "INSERT INTO diary (email, text, sentiment, date) VALUES (%s, %s, %s, %s)",
                (st.session_state.email, self.note, mood_label, datetime.now())
            )
            
            if success:
                st.toast("‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!", icon="‚úÖ")
                self.show_sentiment_feedback(mood_label)
        except Exception as e:
            st.error(f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å: {e}")
    
    def show_sentiment_feedback(self, sentiment):
        if sentiment == "pos":
            st.balloons()
            st.success("""
            **üéâ ‡πÄ‡∏£‡∏≤‡∏î‡∏µ‡πÉ‡∏à‡∏ó‡∏µ‡πà‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡∏Ñ‡∏∏‡∏ì‡∏°‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∏‡∏Ç!**  
            ‡πÇ‡∏•‡∏Å‡πÉ‡∏ö‡∏ô‡∏µ‡πâ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏¢‡∏¥‡πâ‡∏°‡πÉ‡∏´‡πâ‡∏Ñ‡∏∏‡∏ì‡∏ô‡∏∞
            """)
            st.image("data/happy_mood.png", width=200)
        else:
            st.info("""
            **üí™ ‡πÑ‡∏°‡πà‡πÄ‡∏õ‡πá‡∏ô‡πÑ‡∏£‡∏ô‡∏∞‡∏ñ‡πâ‡∏≤‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡∏Ñ‡∏∏‡∏ì‡∏£‡∏π‡πâ‡∏™‡∏∂‡∏Å‡πÑ‡∏°‡πà‡∏î‡∏µ**  
            ‡∏û‡∏£‡∏∏‡πà‡∏á‡∏ô‡∏µ‡πâ‡∏à‡∏∞‡πÄ‡∏õ‡πá‡∏ô‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏î‡∏µ‡∏Å‡∏ß‡πà‡∏≤‡πÅ‡∏ô‡πà‡∏ô‡∏≠‡∏ô
            """)
            st.image("data/sad_mood.png", width=200)

class HistoryPage:
    def display(self):
        st.title("üìú ‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å")
        
        db = DatabaseManager()
        history = db.execute_query(
            "SELECT text, date, sentiment FROM diary WHERE email = %s ORDER BY date DESC",
            (st.session_state.email,)
        )
        
        if history:
            df = pd.DataFrame(history, columns=["‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å", "‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà", "‡∏≠‡∏≤‡∏£‡∏°‡∏ì‡πå"])
            st.dataframe(df, use_container_width=True)
        else:
            st.info("‡∏Ñ‡∏∏‡∏ì‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÉ‡∏î‡πÜ")

# Main application
def main():
    init_session_state()
    setup_page_config()
    setup_custom_css()
    
    # Sidebar menu for logged-in users
    if st.session_state.logged_in:
        with st.sidebar:
            st.image("data/logo1.png", width=100)
            st.write(f"‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ, {st.session_state.user_info['fname']}")
            
            menu_options = {
                "‡πÅ‡∏î‡∏ä‡∏ö‡∏≠‡∏£‡πå‡∏î": "Dashboard",
                "‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏≠‡∏≤‡∏£‡∏°‡∏ì‡πå": "Diary",
                "‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å": "History",
                "‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ö": "Logout"
            }
            
            selected = st.selectbox("‡πÄ‡∏°‡∏ô‡∏π‡∏´‡∏•‡∏±‡∏Å", list(menu_options.keys()))
            
            if menu_options[selected] == "Logout":
                st.session_state.logged_in = False
                st.session_state.current_page = "Login"
                st.rerun()
            else:
                st.session_state.current_page = menu_options[selected]
    
    # Display current page
    pages = {
        "Login": LoginPage(),
        "Register": RegisterPage(),
        "Dashboard": DashboardPage(),
        "Diary": DiaryPage(),
        "History": HistoryPage()
    }
    
    current_page = st.session_state.current_page
    if current_page in pages:
        pages[current_page].display()
    else:
        st.error("‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÑ‡∏°‡πà‡∏û‡∏ö")

if __name__ == "__main__":
    main()